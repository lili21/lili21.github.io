<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>li.li</title>
  
  
  <link href="https://lili21.github.io/atom.xml" rel="self"/>
  
  <link href="https://lili21.github.io/"/>
  <updated>2021-12-19T06:08:46.817Z</updated>
  <id>https://lili21.github.io/</id>
  
  <author>
    <name>li.li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack系列 - hash, chunkhash, contenthash</title>
    <link href="https://lili21.github.io/2018/07/14/webpack-hash/"/>
    <id>https://lili21.github.io/2018/07/14/webpack-hash/</id>
    <published>2018-07-14T12:26:43.000Z</published>
    <updated>2021-12-19T06:08:46.817Z</updated>
    
    <content type="html"><![CDATA[<p>大家在使用webpack的时候，肯定有用到类似这样的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack在打包的时候，会将<code>[name]</code>, <code>[chunkhash]</code>这样的占位符替换成对应的值，最终生成的文件名会是<code>main.cd54a69986890c0f0ba4.js</code>这样的形式.</p><p>webpack在<code>4.3.0</code>版本里添加了对<code>[contenthash]</code>占位符的支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[contenthash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从官方的文档与介绍性文章来看，官方是推荐使用<code>[contenthash]</code>的。最近在使用的过程中踩了一个大坑，所以下定决心研究一下这些hash值到底是怎么生成的。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>webpack默认使用<code>md4</code>算法生成hash值，（文档上写的是<code>md5</code>，应该是还没有来得及更新）</p><p><a href="https://github.com/webpack/webpack/blob/18d33c630f799e99e5e43fc0b6931713dc976529/lib/WebpackOptionsDefaulter.js#L164" target="_blank" rel="noopener">webpack默认配置源码</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.set(<span class="string">"output.hashFunction"</span>, <span class="string">"md4"</span>);</span><br><span class="line"><span class="keyword">this</span>.set(<span class="string">"output.hashDigest"</span>, <span class="string">"hex"</span>);</span><br><span class="line"><span class="keyword">this</span>.set(<span class="string">"output.hashDigestLength"</span>, <span class="number">20</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>具体一点，webpack生成各种hash值的步骤如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hash = <span class="built_in">require</span>(<span class="string">'crypto'</span>).createHash(<span class="string">'md4'</span>)</span><br><span class="line"></span><br><span class="line">hash.update(<span class="string">'content 1'</span>)</span><br><span class="line">hash.update(<span class="string">'content 2'</span>)</span><br><span class="line">hash.update(<span class="string">'content 3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = hash.digest(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><p>我们用下面这个简单的项目做示例</p><p>文件结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- src</span><br><span class="line">  - index.js</span><br><span class="line">- webpack.config.js</span><br></pre></td></tr></table></figure><p><code>src/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello, Webpack'</span>)</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[contenthash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    runtimeChunk: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><blockquote><p>The hash of the compilation</p></blockquote><p><code>[hash]</code>占位符大家肯定很少用到，因为<code>[hash]</code>是以<em>compilation</em>为粒度的。也就是说每次打包都会生成一个hash值，用<code>[hash]</code>占位符的话，所有文件的hash都会是一样的</p><p><img src="/images/webpack-hash.jpg" alt=""></p><p><a href="https://github.com/webpack/webpack/blob/18d33c630f799e99e5e43fc0b6931713dc976529/lib/Compilation.js#L2188" target="_blank" rel="noopener">webpack源码</a></p><p>简化版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大家在使用webpack的时候，肯定有用到类似这样的配置&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
    <category term="webpack" scheme="https://lili21.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-4-upgrade-guide</title>
    <link href="https://lili21.github.io/2018/03/15/webpack-4-upgrade-guide/"/>
    <id>https://lili21.github.io/2018/03/15/webpack-4-upgrade-guide/</id>
    <published>2018-03-15T07:53:33.000Z</published>
    <updated>2018-07-14T04:34:49.943Z</updated>
    
    <content type="html"><![CDATA[<p><strong>2018-04-09更新</strong><br><a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin@^0.4.0</a>支持了<strong>contenthash</strong>（需配合webpack@^4.3.0使用）。</p><p><strong>2018-03-21更新</strong></p><p><a href="https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/749" target="_blank" rel="noopener">etwp决定不再支持webpack@4</a></p><p>webpack 4发布也有一段时间了，虽然官方的文档，升级指南都没有完成，部分插件适配webpack 4的开发也还在进行中，但对于一个资深前端配置工程师，大刀早已饥渴难耐，所以就出一份非官方升(cai)级(keng)指南吧。</p><p><a href="https://github.com/lili21/webpack4-demo" target="_blank" rel="noopener">我没时间看你废话，给我一份配置</a></p><p>webpack 4做了很多改进，我就挑一些我比较关心的点来展开</p><h3 id="0CJS"><a href="#0CJS" class="headerlink" title="0CJS"></a>0CJS</h3><p>随着像<a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">parcel</a>这样零配置，开箱即用打包工具的流行，被人吐槽难用，难懂，难配置的webpack显然感受到了压力，在4.0的版本中，给部分配置加上了默认值，并引入了<code>mode</code>概念，为开发，及生产环境提供两种不同的默认配置，极大的简化了webpack的配置。在4.0版本中，你甚至不需要配置，即可使用(虽然没什么用)。</p><p><strong>默认值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'src/'</span>,</span><br><span class="line">  outpu: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: <span class="string">'dist/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack 4中引入的<code>mode</code>是必需设置的（如果没有设置，会报警），你可以通过<code>webpack --mode ...</code>来设置，也可以通过<code>webpack.config.js</code>来设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span> <span class="comment">// development || production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mode</code>也是为了简化配置项，不同的<code>mode</code>会为我们设置不同的默认配置，就不需要我们一个个去分别配置了。</p><p>开发模式更关注开发体验：</p><ul><li>更利于浏览器调试</li><li>更快的增量编译速度</li><li>更详细的报错消息</li></ul><p>生成模式更关注用户体验：</p><ul><li>性能（文件大小，运行性能，打包速度）</li></ul><p>详细的说明可以参考<a href="https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a" target="_blank" rel="noopener">这篇文章</a></p><h3 id="Loader与Plugin"><a href="#Loader与Plugin" class="headerlink" title="Loader与Plugin"></a>Loader与Plugin</h3><p>loader的其实没有什么变化，我用到的loader升级到最新版都可以直接用，有些甚至不用升级。变化比较大的是plugin。<br>webpack 4使用了新的插件体系，导致之前的插件基本都是需要改的，那么这些插件目前对webpack 4的支持如何呢？</p><ul><li><p><a href="mailto:extract-text-webpack-plugin@4.0.0-beta.0" target="_blank" rel="noopener">extract-text-webpack-plugin@4.0.0-beta.0</a></p><p>  <a href="https://github.com/webpack-contrib/extract-text-webpack-plugin/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+4.0.0-beta.0" target="_blank" rel="noopener">issue list</a> 可以看到，问题还是比较多的。<br>  我自己遇到的问题是，在配合<code>splitChunks</code>(后面会讲到)时，会生成0kb的css文件，<a href="https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/738" target="_blank" rel="noopener">issue</a>。<br>  对于这个问题，我已经提了<a href="https://github.com/webpack-contrib/extract-text-webpack-plugin/pull/746" target="_blank" rel="noopener">PR</a>了。</p><p>  官方出了一个<a href="github.com/webpack-contrib/mini-css-extract-plugin">mini-css-extract-plugin</a>作为替代品</p></li><li><p><a href="mailto:html-webpack-plugin@3.0.0" target="_blank" rel="noopener">html-webpack-plugin@3.0.0</a>+</p><p>  这个插件目前是支持webpack 4的，只是他自己的插件不一定支持，这个在升级的时候需要注意</p></li><li><p>uglifyjs-webpack-plugin</p><p>  这个插件目前也是支持webpack 4的。其实在<code>production</code>模式下，代码是默认会压缩的。当然，如果你有更细致的自定义需求，就可以用到这个插件。</p></li></ul><h3 id="RIP-CommonsChunkPlugin"><a href="#RIP-CommonsChunkPlugin" class="headerlink" title="RIP CommonsChunkPlugin"></a>RIP CommonsChunkPlugin</h3><p>上面讲到的都是一些第三方的插件改动，而改动最大，影响也最大的就是webpack 4使用<code>optimization.splitChunks</code>替代了<code>CommonsChunkPlugin</code>，并且直接移除了<code>CommonsChunkPlugin</code>，所以这部分迁移起来比较麻烦。</p><p>对于各位配置工程师来说，<code>CommonsChunkPlugin</code>应该是很熟悉了，我们主要用他来抽取代码中的共用部分，<code>webpack runtime</code>之类的代码，结合<code>chunkhash</code>，实现最好的缓存策略。而这一部分，也是webpack支持的比较差的，这个几乎三岁的<a href="https://github.com/webpack/webpack/issues/1315" target="_blank" rel="noopener">issue</a>，至今还没有解决。对这个问题比较感兴趣的，可以拜读一下这篇<a href="https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31" target="_blank" rel="noopener">文章</a>。我这里就不展开了，直接贴一份<code>CommonsChunkPlugin</code>时代解决这个问题的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.NamedChunksPlugin(<span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (chunk.name) &#123;</span><br><span class="line">        <span class="keyword">return</span> chunk.name</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'faceless-chunk'</span> <span class="comment">// a chunk has no name</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      minChunks (<span class="built_in">module</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">          /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</span><br><span class="line">          /node_modules/.test(<span class="built_in">module</span>.resource)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extract webpack runtime and module manifest to its own file in order to</span></span><br><span class="line">    <span class="comment">// prevent vendor hash from being updated whenever app bundle is updated</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'runtime'</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extracts shared chunks from code splitted chunks</span></span><br><span class="line">    <span class="comment">// https://github.com/webpack/webpack/issues/4392</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'app'</span>,</span><br><span class="line">      <span class="keyword">async</span>: <span class="string">'async-vendor'</span>,</span><br><span class="line">      children: <span class="literal">true</span>,</span><br><span class="line">      minChunks: <span class="number">3</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>升级到webpack 4后的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: <span class="function"><span class="params">chunk</span> =&gt;</span> (</span><br><span class="line">            chunk.resource &amp;&amp;</span><br><span class="line">            /\.js$/.test(chunk.resource) &amp;&amp;</span><br><span class="line">            /node_modules/.test(chunk.resource)</span><br><span class="line">          ),</span><br><span class="line">          chunks: <span class="string">'initial'</span>,</span><br><span class="line">          name: <span class="string">'vendors'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'async-vendors'</span>: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          chunks: <span class="string">'async'</span>,</span><br><span class="line">          name: <span class="string">'async-vendors'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    runtimeChunk: &#123; <span class="attr">name</span>: <span class="string">'runtime'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedChunksPlugin(<span class="function"><span class="params">chunk</span> =&gt;</span> chunk.name || <span class="string">'faceless-chunk'</span>), <span class="comment">// a chunk has no name!!!</span></span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这份<a href="https://gist.github.com/sokra/1522d586b8e5c0f5072d7565c2bee693" target="_blank" rel="noopener">gist</a>算是一份关于<code>optimization.splitChunks</code>，<code>optimization.runtimeChunk</code>的文档了，感兴趣的同学可以看一下</p><p>迁移时间其实花的挺长的，一方面给webpack提issue，一方面是给wepback插件提issue跟PR。<br>wepback对于issue的反馈还是很快的，上次提的issue，几个小时就给我直接修复了。但是插件就比较慢了，可能issue提了几天才有反馈。<br>总之希望这篇文章能够帮到正在升级和打算升级的同学们。</p><p>最后奉上一份完整的<a href="https://github.com/lili21/webpack4-demo" target="_blank" rel="noopener">webpack 4配置</a>，有问题可以直接在这里repo里提issue。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;2018-04-09更新&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/webpack-contrib/mini-css-extract-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mini</summary>
      
    
    
    
    
    <category term="webpack" scheme="https://lili21.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>利用decorator解决angular依赖注入问题</title>
    <link href="https://lili21.github.io/2017/01/19/decorator-for-angular-di/"/>
    <id>https://lili21.github.io/2017/01/19/decorator-for-angular-di/</id>
    <published>2017-01-19T03:18:40.000Z</published>
    <updated>2018-07-14T04:34:49.941Z</updated>
    
    <content type="html"><![CDATA[<p>依赖注入一直是<code>angular</code>为人称道的特性之一，在这里先简单介绍一下依赖注入的实现原理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctrl</span> (<span class="params">$scope, ServiceA</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入处理“三部曲”"><a href="#依赖注入处理“三部曲”" class="headerlink" title="依赖注入处理“三部曲”"></a>依赖注入处理“三部曲”</h3><ol><li>通过调用<code>ctrl.toString()</code>讲函数转为字符串</li><li>通过正则获取函数的参数名</li><li>根据参数名获取相应的依赖</li></ol><a id="more"></a><p>像我们这样严肃的前端工程师，线上的代码肯定是有代码压缩过的。所有最后我们的代码可能变成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params">b, c</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为找不到<code>b</code>, <code>c</code>，<code>angular</code>就会报错。解决方式也很简单，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组方式</span></span><br><span class="line">[<span class="string">'$scope'</span>, <span class="string">'ServiceA'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, ServiceA</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加$inject属性方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctrl</span> (<span class="params">$scope, ServiceA</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctrl.$inject = [<span class="string">'$scope'</span>, <span class="string">'ServiceA'</span>]</span><br></pre></td></tr></table></figure><p>以上两种方式都可以解决代码压缩导致依赖注入不可用的问题。</p><p>但在实际的项目中，每个地方都需要这么写有点boring。所以我们一般都会引入相应的工具帮助我们自动化这个过程。像<code>webpack</code>里<code>ng-annotate-loader</code>，<code>gulp</code>里的<code>gulp-ng-annotate</code>。FYI，这些工具都是依赖<a href="https://github.com/olov/ng-annotate" target="_blank" rel="noopener">ng-annotate</a>。</p><p>工具的问题在于，依赖的更新会导致工具的不可用。比如最近我把<code>webpack</code>更新到了<code>2.0</code>，导致<code>ng-annotate-loader</code>了不可用。另一个问题是，很多时候我们会使用<code>class</code>，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctrl</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (ServiceA, ServiceB, ServiceC, ...) &#123;</span><br><span class="line">    <span class="keyword">this</span>.sa = ServiceA</span><br><span class="line">    <span class="keyword">this</span>.sb = ServiceB</span><br><span class="line">    <span class="keyword">this</span>.sc = ServiceC</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要在<code>constructor</code>里将依赖绑在<code>this</code>上，当依赖变多的时候，每个地方都要这么写同样也很boring。这就是我们今天需要解决的问题。</p><h3 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h3><p><code>decorator</code>是ES7中的特性，目前该提案处于<code>stage-2</code>。利用<code>babel</code>，我们今天就可以用了。废话不多说，直接上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Inject(<span class="string">'ServiceA'</span>, <span class="string">'ServiceB'</span>, <span class="string">'ServiceC'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctrl</span> </span>&#123;</span><br><span class="line">  fetchData () &#123;</span><br><span class="line">    <span class="keyword">this</span>.ServiceA.fetch()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Inject</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ctrl = <span class="function"><span class="keyword">function</span> (<span class="params">..._args</span>) </span>&#123;</span><br><span class="line">      args.forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>[v] = _args[i]</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> target.apply(<span class="keyword">this</span>, _args)</span><br><span class="line">    &#125;</span><br><span class="line">    ctrl.prototype = target.prototype</span><br><span class="line">    ctrl.$inject = args</span><br><span class="line">    <span class="keyword">return</span> ctrl</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<code>decorator</code>，我们完美的解决这些问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;依赖注入一直是&lt;code&gt;angular&lt;/code&gt;为人称道的特性之一，在这里先简单介绍一下依赖注入的实现原理。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// controller.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ctrl&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;$scope, ServiceA&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;依赖注入处理“三部曲”&quot;&gt;&lt;a href=&quot;#依赖注入处理“三部曲”&quot; class=&quot;headerlink&quot; title=&quot;依赖注入处理“三部曲”&quot;&gt;&lt;/a&gt;依赖注入处理“三部曲”&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过调用&lt;code&gt;ctrl.toString()&lt;/code&gt;讲函数转为字符串&lt;/li&gt;
&lt;li&gt;通过正则获取函数的参数名&lt;/li&gt;
&lt;li&gt;根据参数名获取相应的依赖&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="decorator angular" scheme="https://lili21.github.io/tags/decorator-angular/"/>
    
  </entry>
  
  <entry>
    <title>那些年坑过我的webpack配置，angular+jQuery项目</title>
    <link href="https://lili21.github.io/2016/06/24/webpack-config-for-angular/"/>
    <id>https://lili21.github.io/2016/06/24/webpack-config-for-angular/</id>
    <published>2016-06-24T06:17:45.000Z</published>
    <updated>2018-07-14T04:34:49.943Z</updated>
    
    <content type="html"><![CDATA[<p>最近在死磕webpack，之前我们的项目有用grunt的，也有用gulp+webpack的。因为想简化与统一下构建工具，所以就计划全部用webpack。记录下踩过的坑。</p><h2 id="angular相关的坑"><a href="#angular相关的坑" class="headerlink" title="angular相关的坑"></a>angular相关的坑</h2><p>我们用的是<a href="mailto:angular@1.3.4" target="_blank" rel="noopener">angular@1.3.4</a>，这个版本的angular是无法直接用<code>CommonJS</code>或<code>ES2015 module</code>语法的。如果想要这样用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angular <span class="keyword">from</span> <span class="string">'angular'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">const</span> angular = <span class="built_in">require</span>(<span class="string">'angular'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>需要用exports-loader处理一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack config file</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: &#123;</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/[\/]angular\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'exports?angular'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h2 id="jQuery-angular-的坑"><a href="#jQuery-angular-的坑" class="headerlink" title="jQuery + angular 的坑"></a>jQuery + angular 的坑</h2><p>angular内置了一个简化版的jQuery，想要让angular使用jQuery的话，必须要在angular前引入jQuery同时暴露<code>$</code>全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jquery form <span class="string">'jquery'</span> <span class="comment">// 先引入jquery</span></span><br><span class="line"><span class="keyword">import</span> angular <span class="keyword">from</span> <span class="string">'angular'</span></span><br></pre></td></tr></table></figure><p>使用用expose-loader暴露<code>$</code>全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack config file</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: &#123;</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="built_in">require</span>.resolve(<span class="string">'jquery'</span>),</span><br><span class="line">        loader: <span class="string">'expose?$!expose?jQuery'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>你也可以直接在代码中声明全局变量，这样就不需要expose-loader了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.jQuery = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line"><span class="keyword">const</span> angular = <span class="built_in">require</span>(<span class="string">'angular'</span>)</span><br></pre></td></tr></table></figure><h2 id="webpack自己的坑"><a href="#webpack自己的坑" class="headerlink" title="webpack自己的坑"></a>webpack自己的坑</h2><p>我们代码在发布上线的时候都会使用long-term-caching，我们会把经常变动的业务代码(app.js)与不怎么变动的第三方依赖代码(vendor.js)分开打包，保证每次发布上线只有业务代码需要重新加载。但即使我们只是改动了业务代码，vendor.js的hash值还是会变动，导致long-term-caching无效。具体的原因可以看这个<a href="https://github.com/webpack/webpack/issues/1315#issuecomment-234206979" target="_blank" rel="noopener">issue</a></p><p>完整的配置可以看这个项目<a href="https://github.com/lili21/ml-template-angular" target="_blank" rel="noopener">webpack-angular</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在死磕webpack，之前我们的项目有用grunt的，也有用gulp+webpack的。因为想简化与统一下构建工具，所以就计划全部用webpack。记录下踩过的坑。&lt;/p&gt;
&lt;h2 id=&quot;angular相关的坑&quot;&gt;&lt;a href=&quot;#angular相关的坑&quot; class=&quot;headerlink&quot; title=&quot;angular相关的坑&quot;&gt;&lt;/a&gt;angular相关的坑&lt;/h2&gt;&lt;p&gt;我们用的是&lt;a href=&quot;mailto:angular@1.3.4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;angular@1.3.4&lt;/a&gt;，这个版本的angular是无法直接用&lt;code&gt;CommonJS&lt;/code&gt;或&lt;code&gt;ES2015 module&lt;/code&gt;语法的。如果想要这样用&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; angular &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; angular = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="webpack" scheme="https://lili21.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>eslint+pre-commit做代码检查</title>
    <link href="https://lili21.github.io/2016/05/23/eslint-pre-commit%E5%81%9A%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5/"/>
    <id>https://lili21.github.io/2016/05/23/eslint-pre-commit%E5%81%9A%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5/</id>
    <published>2016-05-23T09:44:22.000Z</published>
    <updated>2018-07-14T04:34:49.941Z</updated>
    
    <content type="html"><![CDATA[<p>前端团队大到5+人数时，代码的规范就会变得很重要。介绍下目前我们的使用的方案，eslint结合pre-commit工具，提交代码时自动做代码检查。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="http://eslint.org/" target="_blank" rel="noopener">eslint</a> 代码检查工具</li><li><a href="https://github.com/observing/pre-commit" target="_blank" rel="noopener">pre-commit</a> pre-commit钩子辅助工具</li></ul><a id="more"></a><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h4><p>按你们团队规范配置即可，我们用的是eslint-config-standard</p><p>.eslintrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"standard"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h4><p>package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "eslint": "^2.4.0",</span><br><span class="line">    "eslint-config-standard": "^5.1.0",</span><br><span class="line">    "eslint-plugin-promise": "^1.1.0",</span><br><span class="line">    "eslint-plugin-standard": "^1.3.2",</span><br><span class="line">    "pre-commit": "^1.1.2"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "eslint": "eslint $(git diff-index --cached HEAD --name-only --diff-filter ACMR | egrep '.js$')"</span><br><span class="line">  &#125;,</span><br><span class="line">  "pre-commit": ["eslint"],</span><br><span class="line">  "precommit.silent": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次commit都只会检查此次commit包含的js文件。如果不符合规范，则无法提交成功。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前端团队大到5+人数时，代码的规范就会变得很重要。介绍下目前我们的使用的方案，eslint结合pre-commit工具，提交代码时自动做代码检查。&lt;/p&gt;
&lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eslint.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;eslint&lt;/a&gt; 代码检查工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/observing/pre-commit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pre-commit&lt;/a&gt; pre-commit钩子辅助工具&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="eslint git hooks" scheme="https://lili21.github.io/tags/eslint-git-hooks/"/>
    
  </entry>
  
  <entry>
    <title>es2015-rest-paramters</title>
    <link href="https://lili21.github.io/2016/05/01/es2015-rest-paramters/"/>
    <id>https://lili21.github.io/2016/05/01/es2015-rest-paramters/</id>
    <published>2016-05-01T12:32:19.000Z</published>
    <updated>2018-07-14T04:34:49.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Rest-parameters"><a href="#Rest-parameters" class="headerlink" title="Rest parameters"></a>Rest parameters</h3><p>在写API的时候一个常见需求是可变函数（接受任意参数的函数）。<code>String.prototype.concat</code>就是一个可变函数，它可以接受任意个字符串参数。在ES6之前，是通过arguments来实现的。现在，rest parameters提供了一种更好的方法。<br>为了达到演示效果，来看一个简单的可变函数<code>containsAll</code>，该函数判断一个字符串是否包含多个子字符串。例如，<code>containsAll(&#39;banana&#39;, &#39;b&#39;, &#39;nan&#39;)</code>返回<code>true</code>，而<code>containsAll(&#39;banana&#39;, &#39;c&#39;, &#39;nan&#39;)</code>返回<code>false</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsAll</span>(<span class="params">haystack</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> needle = <span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (haystack.indexOf(needle) === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>这种实现确实能够实现我们的功能，但他的可读性并不是很好。函数的只有一个参数<code>haystack</code>，所以你没法一眼看出这个函数接受多个参数。同时，我们在<code>arguments</code>上的遍历也是从1而不是0开始，如果我们需要添加一个参数，那么我们同时也需要更改循环代码。rest parameters解决了这两方面的问题。以下是ES6的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsAll</span>(<span class="params">haystack, ...needles</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> needle <span class="keyword">of</span> needles) &#123;</span><br><span class="line">    <span class="keyword">if</span> (haystack.indexOf(needle) === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们调用<code>containsAll(&#39;banana&#39;, &#39;b&#39;, &#39;nan&#39;)</code>时，<code>haystack</code>就是第一个被传入的参数，即<code>banana</code>。<code>needles</code>前面的省略号即表明该参数为rest参数，所有剩下的参数会放入一个数组内并赋给<code>needles</code>。即<code>needles</code>被设为<code>[&#39;b&#39;, &#39;nan&#39;]</code>。</p><p>注意，只有最后一个参数可以被标记为rest参数。当函数调用时，rest参数前的参数都正常赋值，多余的参数组成数组赋给rest参数。如果没有多余的参数，那么rest参数就是一个空的数组，而不是<code>undefined</code>。</p><p><a href="https://hacks.mozilla.org/2015/05/es6-in-depth-rest-parameters-and-defaults/" target="_blank" rel="noopener">原文</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Rest-parameters&quot;&gt;&lt;a href=&quot;#Rest-parameters&quot; class=&quot;headerlink&quot; title=&quot;Rest parameters&quot;&gt;&lt;/a&gt;Rest parameters&lt;/h3&gt;&lt;p&gt;在写API的时候一个常见需求是可变函数（接受任意参数的函数）。&lt;code&gt;String.prototype.concat&lt;/code&gt;就是一个可变函数，它可以接受任意个字符串参数。在ES6之前，是通过arguments来实现的。现在，rest parameters提供了一种更好的方法。&lt;br&gt;为了达到演示效果，来看一个简单的可变函数&lt;code&gt;containsAll&lt;/code&gt;，该函数判断一个字符串是否包含多个子字符串。例如，&lt;code&gt;containsAll(&amp;#39;banana&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;nan&amp;#39;)&lt;/code&gt;返回&lt;code&gt;true&lt;/code&gt;，而&lt;code&gt;containsAll(&amp;#39;banana&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;nan&amp;#39;)&lt;/code&gt;返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsAll&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;haystack&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; needle = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (haystack.indexOf(needle) === &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>window.postMessage接口里的message参数</title>
    <link href="https://lili21.github.io/2016/04/20/postMessage-message/"/>
    <id>https://lili21.github.io/2016/04/20/postMessage-message/</id>
    <published>2016-04-20T12:35:48.000Z</published>
    <updated>2018-07-14T04:34:49.942Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚好在做一些iframe方面的东西，就使用了下postMessage这个API，结果遇到个奇怪的错误。</p><p><img src="/images/post-message-error.png" alt=""></p><p>原因是message参数所使用的序列化的算法（结构化克隆算法）对于message的内容与结构有一定的限制。</p><a id="more"></a><ol><li><code>Error</code>与<code>Function</code>对象无法被该算法复制，如果message中包含这样的对象，将会抛一个<code>DATA_CLONE_ERR</code>异常</li><li>message中如果包含<code>DOM</code>节点，同样会抛一个<code>DATA_CLONE_ERR</code>异常</li><li>某些对象的属性不会被复制<ol><li><code>RegExp</code>对象的<code>lastIndex</code>属性不会被复制</li><li>属性描述符，<code>setters</code>以及<code>getters</code>同样不会被复制，所以如果一个对象通过属性描述符设置为只读的，在复制后将变为可读可写</li><li>对象的原型链也不会被复制</li></ol></li></ol><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm" target="_blank" rel="noopener">source</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近刚好在做一些iframe方面的东西，就使用了下postMessage这个API，结果遇到个奇怪的错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/post-message-error.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;原因是message参数所使用的序列化的算法（结构化克隆算法）对于message的内容与结构有一定的限制。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>严格模式严格在哪里</title>
    <link href="https://lili21.github.io/2015/10/19/strict-mode/"/>
    <id>https://lili21.github.io/2015/10/19/strict-mode/</id>
    <published>2015-10-19T12:45:36.000Z</published>
    <updated>2018-07-14T04:34:49.942Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">source</a></p><h2 id="避免偶然创建全局变量"><a href="#避免偶然创建全局变量" class="headerlink" title="避免偶然创建全局变量"></a>避免偶然创建全局变量</h2><p>在正常模式下，如果在赋值的时候输错了变量名，会在当前作用域下创建一个变量。在严格模式下会抛出错误。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line">mistypedVaraible = <span class="number">17</span>;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="在正常模式下默默失败的赋值，在严格模式下会抛出异常"><a href="#在正常模式下默默失败的赋值，在严格模式下会抛出异常" class="headerlink" title="在正常模式下默默失败的赋值，在严格模式下会抛出异常"></a>在正常模式下默默失败的赋值，在严格模式下会抛出异常</h2><p>  例如，<code>NaN</code>是不可写的全局变量。在正常模式下，赋值给<code>NaN</code>是无效的，也不会有任何反馈。在严格模式下，将会抛出异常。赋值给不可写变量，只读变量，或者给不可扩展对象添加新的属性在严格模式下都会抛出异常。<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">//赋值给不可写变量</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj1, <span class="string">'x'</span>, &#123;<span class="attr">value</span>: <span class="number">42</span>, <span class="attr">writable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">obj1.x = <span class="number">9</span>; <span class="comment">// 报错</span></span><br><span class="line"><span class="comment">//赋值给只读变量</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;get x() &#123;<span class="keyword">return</span> <span class="number">17</span>;&#125;&#125;;</span><br><span class="line">obj2.x = <span class="number">5</span>; <span class="comment">// 报错</span></span><br><span class="line"><span class="comment">//给不可扩展对象添加新属性</span></span><br><span class="line"><span class="keyword">var</span> fixed = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(fixed);</span><br><span class="line">fixed.newProp = <span class="string">'ohai'</span>; <span class="comment">//报错</span></span><br></pre></td></tr></table></figure></p><h2 id="删除不可删的属性会报错"><a href="#删除不可删的属性会报错" class="headerlink" title="删除不可删的属性会报错"></a>删除不可删的属性会报错</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">Object</span>.prorotype; <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="对象属性名必须唯一（es6下可以不唯一）"><a href="#对象属性名必须唯一（es6下可以不唯一）" class="headerlink" title="对象属性名必须唯一（es6下可以不唯一）"></a>对象属性名必须唯一（es6下可以不唯一）</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">p</span> : <span class="number">1</span>, <span class="attr">p</span>: <span class="number">2</span>&#125;; <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="函数参数名必须唯一"><a href="#函数参数名必须唯一" class="headerlink" title="函数参数名必须唯一"></a>函数参数名必须唯一</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, a, c</span>) </span>&#123; <span class="comment">//报错</span></span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八进制不可用"><a href="#八进制不可用" class="headerlink" title="八进制不可用"></a>八进制不可用</h2><h2 id="with不可用"><a href="#with不可用" class="headerlink" title="with不可用"></a>with不可用</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">with</span> (obj) <span class="comment">//报错</span></span><br><span class="line">&#123;</span><br><span class="line">  x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eval不会影响外部作用域"><a href="#eval不会影响外部作用域" class="headerlink" title="eval不会影响外部作用域"></a>eval不会影响外部作用域</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> evalX = <span class="built_in">eval</span>(<span class="string">"'use strict'; var x = 42; x"</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(x === <span class="number">17</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(evalX === <span class="number">42</span>);</span><br></pre></td></tr></table></figure><p>  需要注意的是，eval的调用方式也会影响到eval是否在严格模式下<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict1</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict2</span>(<span class="params">f, str</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">return</span> f(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonstrict</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(str);</span><br><span class="line">&#125;</span><br><span class="line">strict1(<span class="string">"'Strict mode code!'"</span>);<span class="comment">//严格模式</span></span><br><span class="line">strict1(<span class="string">"'use strict'; 'Strict mode code!'"</span>);<span class="comment">//严格模式</span></span><br><span class="line">strict2(<span class="built_in">eval</span>, <span class="string">"'Non-strict code.'"</span>);<span class="comment">//非严格模式</span></span><br><span class="line">strict2(<span class="built_in">eval</span>, <span class="string">"'use strict'; 'Strict mode code!'"</span>);<span class="comment">//严格模式</span></span><br><span class="line">nonstrict(<span class="string">"'Non-strict code.'"</span>);<span class="comment">//非严格模式</span></span><br><span class="line">nonstrict(<span class="string">"'use strict'; 'Strict mode code!'"</span>);<span class="comment">//严格模式</span></span><br></pre></td></tr></table></figure></p><h2 id="禁止删除原始类型变量"><a href="#禁止删除原始类型变量" class="headerlink" title="禁止删除原始类型变量"></a>禁止删除原始类型变量</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">delete</span> x;<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"var y; delete y;"</span>);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="eval和arguments不可修改，以下操作都是语法错误"><a href="#eval和arguments不可修改，以下操作都是语法错误" class="headerlink" title="eval和arguments不可修改，以下操作都是语法错误"></a><code>eval</code>和<code>arguments</code>不可修改，以下操作都是语法错误</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="built_in">eval</span> = <span class="number">17</span>;</span><br><span class="line"><span class="built_in">arguments</span>++;</span><br><span class="line">++<span class="built_in">eval</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;set p(<span class="built_in">arguments</span>) &#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">eval</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;&#125; <span class="keyword">catch</span>(<span class="built_in">arguments</span>) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">eval</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arguments</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> y = <span class="function"><span class="keyword">function</span> <span class="title">eval</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'arguments'</span>, <span class="string">"'use strict'; return 17;"</span>);</span><br></pre></td></tr></table></figure><h2 id="严格模式下修改参数值不会影响arguments，修改arguments也不会影响参数"><a href="#严格模式下修改参数值不会影响arguments，修改arguments也不会影响参数" class="headerlink" title="严格模式下修改参数值不会影响arguments，修改arguments也不会影响参数"></a>严格模式下修改参数值不会影响<code>arguments</code>，修改<code>arguments</code>也不会影响参数</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  a = <span class="number">42</span>;</span><br><span class="line">  <span class="keyword">return</span> [a, <span class="built_in">arguments</span>[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pair = f(<span class="number">17</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(pair[<span class="number">0</span>] === <span class="number">42</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(pair[<span class="number">1</span>] === <span class="number">17</span>);</span><br></pre></td></tr></table></figure><h2 id="arguments-callee不可用"><a href="#arguments-callee不可用" class="headerlink" title="arguments.callee不可用"></a><code>arguments.callee</code>不可用</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="built_in">arguments</span>.callee;&#125;;</span><br><span class="line">f(); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="this可以是任意类型的值（在正模式下，this是对象）-而且如果没有指定this，this为undefined"><a href="#this可以是任意类型的值（在正模式下，this是对象）-而且如果没有指定this，this为undefined" class="headerlink" title="this可以是任意类型的值（在正模式下，this是对象）,而且如果没有指定this，this为undefined"></a><code>this</code>可以是任意类型的值（在正模式下，<code>this</code>是对象）,而且如果没有指定<code>this</code>，<code>this</code>为<code>undefined</code></h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line"><span class="built_in">console</span>.assert(fun() === <span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(fun.call(<span class="number">2</span>) === <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(fun.apply(<span class="literal">null</span>) === <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(fun.call(<span class="literal">undefined</span>) === <span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(fun.bind(<span class="literal">true</span>)() === <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;避免偶然创建全局变量&quot;&gt;&lt;a href=&quot;#避免偶然创建全局变量&quot; class=&quot;headerlink&quot; title=&quot;避免偶然创建全局变量&quot;&gt;&lt;/a&gt;避免偶然创建全局变量&lt;/h2&gt;&lt;p&gt;在正常模式下，如果在赋值的时候输错了变量名，会在当前作用域下创建一个变量。在严格模式下会抛出错误。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mistypedVaraible = &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ng-repeat与ui-sortable一起使用的问题与解决方案</title>
    <link href="https://lili21.github.io/2015/08/12/ng-repeat-ui-sortable/"/>
    <id>https://lili21.github.io/2015/08/12/ng-repeat-ui-sortable/</id>
    <published>2015-08-12T11:43:23.000Z</published>
    <updated>2018-07-14T04:34:49.942Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://jsbin.com/fizubi/edit?js,console,output" target="_blank" rel="noopener">demo</a></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>通过拖拽把0拖至2的位置，再把2拖至3的位置。理应是<code>[1, 0, 3, 2, 4]</code>的列表却变成了<code>[1, 0, 4, 3, 2]</code>。控制台中输出的是当前的<code>lists</code>，但实际的UI与我们的<code>model</code>没有对应起来。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>初始化<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">sortable</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"ui-sortable"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>第一次拖拽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">sortable</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"ui-sortable"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"l in lists"</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-binding"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end ngRepeat: l in lists --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ng-repeat</code>生成每一个<code>element</code>都会带有一个注释，这个注释相当于在页面上的分隔符，便于指令更好处理<code>lists</code>变化后相应的ui变化。而在移动后我们可以看到注释乱了，导致指令的处理发生了错乱。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>保存移动前的元素节点（<code>$(&#39;ul&#39;).contents()</code>），在sortable的<code>stop</code>事件中取消掉sortable，修改<code>lists</code>，通过ng-repeat来实现排序。即只是通过sortable来获取移动的index，然后修改数组，通过angular来实现排序。<a href="https://github.com/angular-ui/ui-sortable" target="_blank" rel="noopener">ui-sortable</a>即是这样实现的。</p></li><li><p><code>ng-repeat= &quot;l in lists track by Math.random()&quot;</code><br>这里简单解释一点<code>ng-repeat</code>的内部实现，<code>ng-repeat</code>在初始化的时候会遍历<code>lists</code>并保存数组每一个元素对应的<code>id</code>，<code>scope</code>，<code>element</code>，同时会保存一个map用来判断数组中的元素是否是新元素，如果提供了<code>track by</code>，该map的key值即为<code>track by</code>对应的值，如果没有提供，key值由angular生成。key值对应的value在初始化的过程中设为<code>true</code>。<br>在<code>lists</code>发生变化的时候，<code>ng-repeat</code>指令会在遍历<code>lists</code>的过程中判断每一个元素是新元素还是旧元素，如果是旧元素，那么直接利用保存好的<code>scope</code>与<code>element</code>即可，如果是新元素，就重新生成。<br>而在拖拽的过程中，会导致内部保存的元素与页面实际元素不符，导致错乱。<br>原因找到，就好解决了。只要每次都生成新的元素就可以了。而<code>ng-repeat</code>指令是通过map来判断是否是新值的，只要每一次<code>track by</code>的值是不同的，问题就能够解决了。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://jsbin.com/fizubi/edit?js,console,output&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;通过拖拽把0拖至2的位置，再把2拖至3的位置。理应是&lt;code&gt;[1, 0, 3, 2, 4]&lt;/code&gt;的列表却变成了&lt;code&gt;[1, 0, 4, 3, 2]&lt;/code&gt;。控制台中输出的是当前的&lt;code&gt;lists&lt;/code&gt;，但实际的UI与我们的&lt;code&gt;model&lt;/code&gt;没有对应起来。&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;初始化&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sortable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ui-sortable&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- ngRepeat: l in lists --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;l in lists&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-scope&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-binding&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- end ngRepeat: l in lists --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;l in lists&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-scope&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-binding&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- end ngRepeat: l in lists --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;l in lists&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-scope&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-binding&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- end ngRepeat: l in lists --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;l in lists&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-scope&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-binding&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- end ngRepeat: l in lists --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;l in lists&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-scope&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ng-binding&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- end ngRepeat: l in lists --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>视窗单位 vs 百分比单位</title>
    <link href="https://lili21.github.io/2015/07/20/%E8%A7%86%E7%AA%97%E5%8D%95%E4%BD%8D-vs-%E7%99%BE%E5%88%86%E6%AF%94%E5%8D%95%E4%BD%8D/"/>
    <id>https://lili21.github.io/2015/07/20/%E8%A7%86%E7%AA%97%E5%8D%95%E4%BD%8D-vs-%E7%99%BE%E5%88%86%E6%AF%94%E5%8D%95%E4%BD%8D/</id>
    <published>2015-07-20T13:40:47.000Z</published>
    <updated>2018-07-14T04:34:49.944Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://bitsofco.de/2015/viewport-vs-percentage-units/" target="_blank" rel="noopener">原文</a></p><h3 id="视窗单位"><a href="#视窗单位" class="headerlink" title="视窗单位"></a>视窗单位</h3><p>视窗单位是相对值，他们的大小由浏览器可视窗口的大小决定。下表列出了相对于视窗的4个单位值。</p><table><thead><tr><th>名称</th><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>视窗宽</td><td>vw</td><td>视窗宽度的 1/100</td></tr><tr><td>视窗高</td><td>vh</td><td>视窗高度的 1/100</td></tr><tr><td>最小视窗</td><td>vmin</td><td>视窗高度，宽度中小值的 1/100</td></tr><tr><td>最大视窗</td><td>vmax</td><td>视窗高度，宽度中大值的 1/100</td></tr></tbody></table><a id="more"></a><p>后两种单位几乎很难用到，所以这里只关注<code>vh</code>和<code>vw</code>。</p><p>视窗单位与百分比在功能上是存在部分重叠的，但它们有各自的有缺点。tl;dr</p><blockquote><p>百分比在宽度上更实用，而<code>vh</code>在高度上更好用</p></blockquote><h3 id="满屏宽度-－-gt-vw"><a href="#满屏宽度-－-gt-vw" class="headerlink" title="满屏宽度 － % &gt; vw"></a>满屏宽度 － % &gt; vw</h3><p><code>vw</code>单位基于可视窗口的宽度，然后浏览器计算的可视窗口包含了浏览器的滚动条。<br><img src="http://bitsofco.de/img/blog/14/viewportvsbody.jpg" alt="image"><br>这也就意味着，如果存在滚动条，那么视窗的宽度将会大于内容区域的宽度</p><blockquote><p>viewport &gt; html</p></blockquote><p>所以，如果你把一个元素的宽度设为100vw，这个元素将会超出html的范围。如下面这个例子，我给html设置了红色的边框，给section设置了背景色<br><img src="http://bitsofco.de/img/blog/14/viewportvsbody2.png" alt="viewport&gt;html"><br>所以如果要达到满屏宽度的效果，百分比效果要好于视窗单位</p><h3 id="满屏高度-－-vh-gt"><a href="#满屏高度-－-vh-gt" class="headerlink" title="满屏高度 － vh &gt; %"></a>满屏高度 － vh &gt; %</h3><p>我们知道，百分比单位是依赖于父元素的尺寸的。如果我们要某一个元素一百分比单位设置满屏高度，那么父元素也得满屏高度。这同时意味着我们需要把元素的<code>position</code>设置为<code>fixed</code>，让html元素成为父元素，或者使用一些<code>hack</code>代码。<br>但如果用<code>vh</code>的话，就这么简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.example &#123;</span><br><span class="line">  height: 100vh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但也要注意的是，在部分浏览器上，<code>vh</code>的表现会有些<a href="http://nicolas-hoizey.com/2015/02/viewport-height-is-taller-than-the-visible-part-of-the-document-in-some-mobile-browsers.html" target="_blank" rel="noopener">诡异</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://bitsofco.de/2015/viewport-vs-percentage-units/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;视窗单位&quot;&gt;&lt;a href=&quot;#视窗单位&quot; class=&quot;headerlink&quot; title=&quot;视窗单位&quot;&gt;&lt;/a&gt;视窗单位&lt;/h3&gt;&lt;p&gt;视窗单位是相对值，他们的大小由浏览器可视窗口的大小决定。下表列出了相对于视窗的4个单位值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;单位&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;视窗宽&lt;/td&gt;
&lt;td&gt;vw&lt;/td&gt;
&lt;td&gt;视窗宽度的 1/100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;视窗高&lt;/td&gt;
&lt;td&gt;vh&lt;/td&gt;
&lt;td&gt;视窗高度的 1/100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最小视窗&lt;/td&gt;
&lt;td&gt;vmin&lt;/td&gt;
&lt;td&gt;视窗高度，宽度中小值的 1/100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最大视窗&lt;/td&gt;
&lt;td&gt;vmax&lt;/td&gt;
&lt;td&gt;视窗高度，宽度中大值的 1/100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>文章推荐</title>
    <link href="https://lili21.github.io/2015/06/08/%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90/"/>
    <id>https://lili21.github.io/2015/06/08/%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90/</id>
    <published>2015-06-08T12:37:48.000Z</published>
    <updated>2018-07-14T04:34:49.944Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一些近期看到的好文章</p><h1 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h1><ul><li><a href="https://goo.gl/67MoY7" target="_blank" rel="noopener">when the heck did learning to code become cool</a><br>强烈推荐</li><li><a href="http://goo.gl/hRPxj0" target="_blank" rel="noopener">we have a problem with promises</a><br>理解promises及<a href="promisesaplus.com">promises A plus</a>规范</li></ul><a id="more"></a><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul><li><a href="http://goo.gl/AfRdbO" target="_blank" rel="noopener">Boiling React Down to a Few Lines in jQuery</a><br>瞬间理解React的核心科技</li><li><a href="http://goo.gl/x0xJMQ" target="_blank" rel="noopener">ReactJS For Stupid People</a><br>通俗易懂，<a href="http://goo.gl/NYu9fX" target="_blank" rel="noopener">中文版</a></li><li><a href="https://goo.gl/LHTrFz" target="_blank" rel="noopener">Container Components</a></li><li><a href="https://goo.gl/DiuqEY" target="_blank" rel="noopener">Smart and Dumb Components</a></li><li><a href="http://goo.gl/32H6J4" target="_blank" rel="noopener">React Tips and Best Practices</a></li></ul><h2 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h2><ul><li><a href="http://goo.gl/QupLHC" target="_blank" rel="noopener">Flux in Depth.Overview and Components</a></li><li><a href="http://goo.gl/UfyQZO" target="_blank" rel="noopener">Flux For Stupid People</a><br><a href="http://goo.gl/sGtA4N" target="_blank" rel="noopener">中文版</a></li><li><a href="https://goo.gl/1XZ0Ag" target="_blank" rel="noopener">The Case for Flux</a></li><li><a href="https://goo.gl/aevQGO" target="_blank" rel="noopener">Those Who Forget The Past</a></li></ul><h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><ul><li><a href="http://blog.mgechev.com/posts/" target="_blank" rel="noopener">mgechev-blog</a><br>这位老兄的博客写的文章都很好，非常值得看</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;推荐一些近期看到的好文章&lt;/p&gt;
&lt;h1 id=&quot;文章&quot;&gt;&lt;a href=&quot;#文章&quot; class=&quot;headerlink&quot; title=&quot;文章&quot;&gt;&lt;/a&gt;文章&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://goo.gl/67MoY7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;when the heck did learning to code become cool&lt;/a&gt;&lt;br&gt;强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/hRPxj0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;we have a problem with promises&lt;/a&gt;&lt;br&gt;理解promises及&lt;a href=&quot;promisesaplus.com&quot;&gt;promises A plus&lt;/a&gt;规范&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>块级元素的默认宽度</title>
    <link href="https://lili21.github.io/2015/06/05/%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%AE%BD%E5%BA%A6/"/>
    <id>https://lili21.github.io/2015/06/05/%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%AE%BD%E5%BA%A6/</id>
    <published>2015-06-05T10:29:55.000Z</published>
    <updated>2018-07-14T04:34:49.943Z</updated>
    
    <content type="html"><![CDATA[<p>一直以为块级元素的默认宽度就是<code>width: 100%</code>，结果却被打脸</p><h2 id="块级元素的默认width"><a href="#块级元素的默认width" class="headerlink" title="块级元素的默认width"></a>块级元素的默认<code>width</code></h2><p>假设一个块级元素的<code>position</code>属性为<code>static</code>或<code>relative</code>，如果你不设定<code>width</code>，那么该元素的<code>width</code>默认值类似100%，但同时元素的内边距与边框会向内挤，就好像设置了<code>box-sizing: border-box</code>。如果你设定了<code>width</code>为100%，那么内边距与边框会向外挤。<br>所以块级元素的<code>width</code>默认值并不是100%，更像是剩余空间的宽度。了解了这一点后，当你考虑要不要设置<code>width</code>时候，也能有据可循。</p><a id="more"></a><h2 id="绝对定位元素的默认width"><a href="#绝对定位元素的默认width" class="headerlink" title="绝对定位元素的默认width"></a>绝对定位元素的默认<code>width</code></h2><p>没有设置<code>width</code>，且<code>position</code>属性为<code>absolute</code>的元素的表现有一点奇怪。这些元素的宽度就是内容所需要的宽度，就像行内元素一样。</p><h2 id="浮动元素的默认width"><a href="#浮动元素的默认width" class="headerlink" title="浮动元素的默认width"></a>浮动元素的默认<code>width</code></h2><p>浮动元素的默认宽度与上一中情况一样，就像行内元素一样。</p><p><a href="http://jsfiddle.net/lukas_li/00uvt70y/" target="_blank" rel="noopener">demo</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直以为块级元素的默认宽度就是&lt;code&gt;width: 100%&lt;/code&gt;，结果却被打脸&lt;/p&gt;
&lt;h2 id=&quot;块级元素的默认width&quot;&gt;&lt;a href=&quot;#块级元素的默认width&quot; class=&quot;headerlink&quot; title=&quot;块级元素的默认width&quot;&gt;&lt;/a&gt;块级元素的默认&lt;code&gt;width&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;假设一个块级元素的&lt;code&gt;position&lt;/code&gt;属性为&lt;code&gt;static&lt;/code&gt;或&lt;code&gt;relative&lt;/code&gt;，如果你不设定&lt;code&gt;width&lt;/code&gt;，那么该元素的&lt;code&gt;width&lt;/code&gt;默认值类似100%，但同时元素的内边距与边框会向内挤，就好像设置了&lt;code&gt;box-sizing: border-box&lt;/code&gt;。如果你设定了&lt;code&gt;width&lt;/code&gt;为100%，那么内边距与边框会向外挤。&lt;br&gt;所以块级元素的&lt;code&gt;width&lt;/code&gt;默认值并不是100%，更像是剩余空间的宽度。了解了这一点后，当你考虑要不要设置&lt;code&gt;width&lt;/code&gt;时候，也能有据可循。&lt;/p&gt;</summary>
    
    
    
    
    <category term="css" scheme="https://lili21.github.io/tags/css/"/>
    
  </entry>
  
</feed>
